set previewer preview
set cleaner cleaner
set preview true
set hidden true
set drawbox true
set icons true
set ignorecase true
set ifs "\n"

cmd open ${{
	case "$f" in
		*.org|*.tex) "$VISUAL" "$f" & ;;
		*.jpg|*.png|*.gif) sxiv "$f" & ;;
		*.mkv|*.mp3|*.mp4|*.flac|*.webp) mpv --no-terminal $(find -name '*.srt' -o -name '*.idx' -o -name '*.sub' -printf '--sub-file=%h/%f ') $fx ;;
		*.csv|*.xls|*.xlsx|*.gnumeric) gnumeric "$f" & ;;
		*.pdf) zathura "$f" & ;;
		*) $EDITOR "$f" ;;
	esac
}}

cmd test ${{
    # echo "mpv "$(echo $fx | tr '\n' ' ' | sed "s/ /\\ /g")""
    # echo "echo "$fx" | tr '\n' ' '"
    echo "mpv $(echo $fx | tr '\n' ' ')"
}}

# Archive bindings
cmd unarchive ${{
	case "$f" in
		*.zip) unzip "$f" ;;
		*.tar.gz) tar -xzvf "$f" ;;
		*.tar.bz2) tar -xjvf "$f" ;;
		*.tar) tar -xvf "$f" ;;
		*) echo "Unsupported format" ;;
	esac
}}

# taken from Brodie
# github.com/BrodieRobertson/dotfiles
cmd trash_restore %trash-restore
cmd trash_clear %trash-empty
cmd trash ${{
	files=$(printf "$fx" | tr '\n' ';')
	while [ "$files" ]; do
		f=${files%%;*}

		trash-put "$(basename "$f")"

		if [ "$files" = "$f" ]; then
			files=''
		else
			files="${files#*;}"
		fi
	done
}}

cmd fzf_jump ${{
	res="$(find . -maxdepth 3 | fzf --reverse --header='Jump to location')"
	if [ -f "$res" ]; then
		cmd="select"
	elif [ -d "$res" ]; then
		cmd="cd"
	fi
	lf -remote "send $id $cmd \"$res\""
}}

# Capitalise beginning of a word
# Replace spaces with underscores
cmd rename_snake_pascal ${{
	echo "$fx" | while read l; do
		new="$(basename "$l" | sed 's/\(^[a-z]\| [a-z]\)/\U&/g ; s/ /_/g')"
		mv "$l" "$(pwd)/$new"
	done
}}

# Lowercase everything
# Replace spaces with underscores
cmd rename_snake_case ${{
	echo "$fx" | while read l; do
		new="$(basename "$l" | sed 's/[A-Z]/\L&/g ; s/ /_/g')"
		mv "$l" "$(pwd)/$new"
	done
}}

# Replace spaces with underscores
cmd rename_underscore ${{
    echo "$fx" | while read l; do
        new="$(basename "$l" | sed 's/ /_/g')"
        mv "$l" "$(pwd)/$new"
    done
}}

# Get size of file/dir
# By default returns size of file/dir that has the cursor over it
# Works with multiple file selections
cmd size ${{
	dirs="$PWD"
	[ -n "$fx" ] && dirs="$(echo $fx | sed -z 's/\n/ /;s/ $//g')"
	lf -remote "send echo $(dir-size -d "$dirs" -D 0 -c)"
}}

cmd sudo_paste ${{
	load=$(cat ~/.local/share/lf/files)
	mode=$(echo "$load" | sed -n '1p')
	list=$(echo "$load" | sed '1d')
	if [ $mode = 'copy' ]; then
		sudo cp -R $list .
	elif [ $mode = 'move' ]; then
		sudo mv $list .
	fi
	rm ~/.local/share/lf/files
	lf -remote 'send clear'
}}

cmd copy_path ${{
	echo "$fx" | xclip -r -selection clipboard
}}

# Un-map
map w
map d
map r
map y
map t
map *

map t test

# Glob-select
map *c glob-select *.csv
map *s glob-select *.srt
map *m glob-select *.mkv
map *4 glob-select *.mp4
map *j glob-select *.jpg
map *p glob-select *.png
# map * read -p "hey>" | glob-select

# Rename
map rr rename
map rp rename_snake_case
map rm rename_snake_pascal
map r_ rename_underscore
map rb $vimv $fx

# Backup
map bb $cp -r $f $f.bkp

# Trash
map dd trash
map dr trash_restore
map dc trash_clear

# Other
map - updir
map . set hidden!
map p paste
map sp sudo_paste
map x cut
map yy copy
map yp copy_path
map D delete
map dD delete
map sD $sudo rm -r "$f"
map <enter> open
map au unarchive
map e $$VISUAL "$f"
map J fzf_jump
map S size

# Shortcuts
map gc cd ~/.config
map grr cd ~/repos
map grd cd ~/repos/dotfiles
map grc cd ~/repos/cv
map grs cd ~/repos/scripts/scripts
map grn cd ~/repos/notes
map gp cd ~/Packt
map gh cd /mnt/HDD
map gw cd /mnt/WD
map gl cd ~/wallpapers
map g/ cd /
map g~ cd ~
map g. cd ~/.config
map gd cd ~/Downloads
